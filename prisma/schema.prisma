// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

//local
/*datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}*/


// Vercel
/*datasource db {
   provider = "postgresql"
   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}*/

//render cloud
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// prisma/schema.prisma
/*datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}*/

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  social    Json?

  // Relation fields
  courses     CourseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testsGraded TestResult[]       @relation(name: "graded")
}

model Course {
  id        Int   @id @default(autoincrement())
  name      String
  courseDetails String?

  // Relation fields
  members CourseEnrollment[]
  tests   Test[]
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // Relation fields
  userId   Int
  courseId Int
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Test {
  id        Int    @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  name      String
  date     DateTime

  // Relation fields
  courseId Int
  course Course @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id        Int    @id @default(autoincrement())
  createdAt DateTime @default(now())
  result Int // Percentage precision to one decimal point represented as `result * 10^-1`

  // Relation fields
  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id])
  graderId  Int
  gradedBy  User @relation(name: "graded", fields: [graderId], references: [id])
  testId    Int
  test      Test @relation(fields: [testId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
}
